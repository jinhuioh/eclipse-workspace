/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-04-26 08:08:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 회원정보 수정하는 페이지 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\"\r\n");
      out.write("	content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("<meta name=\"description\" content=\"\">\r\n");
      out.write("<meta name=\"author\" content=\"\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css?family=Open+Sans:100,200,300,400,500,600,700,800,900\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap core CSS -->\r\n");
      out.write("<script type=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\r\n");
      out.write("<link href=\"resources/vendor/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Additional CSS Files -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/assets/css/fontawesome.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/assets/css/templatemo-eduwell-style.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/assets/css/owl.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/assets/css/lightbox.css\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<!-- member.css파일 -->	\r\n");
      out.write("<link rel = \"stylesheet\" type = \"text/css\" href = \"resources/css/member.css\">	\r\n");
      out.write("<script type=\"text/javascript\" src=\"resources/js/jquery-3.4.1.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(document).ready(function() {\r\n");
      out.write("		$('#memberUp').click(function() {\r\n");
      out.write("			console.log('addMember click!');\r\n");
      out.write("			//return false;<-버튼이 submit일때만 return false가 작동. 필요없어서 막아놓음.\r\n");
      out.write("			//ajax의 data값이 0일때만(비밀번호 중복확인 완료) 아래	조건 실행.\r\n");
      out.write("			if ($('#pw').val() == '') {\r\n");
      out.write("				$('#pwc1').text('비밀번호를 입력해주세요');\r\n");
      out.write("			} else if ($('#pw2').val() == '') {\r\n");
      out.write("				$('#pwc2').text('비밀번호 중복확인을 해주세요');\r\n");
      out.write("			} else if ($('#pw').val() != $('#pw2').val()) {\r\n");
      out.write("				$('#pwc2').text('password가 일치하지 않습니다.');\r\n");
      out.write("			} else if ($('#name').val() == '') {\r\n");
      out.write("				$('#nac').text('이름을 입력하세요.');\r\n");
      out.write("			} else {\r\n");
      out.write("				//비밀번호 변경 시-> 기존 비밀번호와 다른 비밀번호만 입력 가능.\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : \"memberModyPw\",//ajax 실행시 views아래에 있는 해당 url에 있는 result를 data에 넣음.\r\n");
      out.write("					data : {\r\n");
      out.write("						'user_id' : $('#id').val(),\r\n");
      out.write("						'user_pw' : $('#pw').val()\r\n");
      out.write("					//$('#pw').val()는 input에 있는 id=\"pw\"와 이름이 같아야한다.\r\n");
      out.write("					//\"user_id\", \"user_pw\"는 컨트롤러의 memberModyPw멥핑에 값이 들어가기때문에 modyPw부분이랑 이름 맞춰주어야한다.\r\n");
      out.write("					},\r\n");
      out.write("					success : function(data) { //views아래에 있는 memberModyPw.jsp의 실행결과result가 data에 담김.\r\n");
      out.write("						if (data == '1') {//data=result(컨트롤러의 model의 result를 의미)\r\n");
      out.write("							$('#pwc1').text('사용할 수 없는 비밀번호 입니다');\r\n");
      out.write("						} else {\r\n");
      out.write("							$('#form').submit();\r\n");
      out.write("						}\r\n");
      out.write("					}//success\r\n");
      out.write("				})//ajax\r\n");
      out.write("			}//else\r\n");
      out.write("\r\n");
      out.write("		})//#memberUp	\r\n");
      out.write("\r\n");
      out.write("		///* 다시 한 번 누르면 text 내용을 없애주도록 구현.  */\r\n");
      out.write("		$('#pw2').click(function() {\r\n");
      out.write("			$('#pwc2').text('')\r\n");
      out.write("		})\r\n");
      out.write("		$('#pw').click(function() {\r\n");
      out.write("			$('#pwc1').text('')\r\n");
      out.write("		})\r\n");
      out.write("		$('#name').click(function() {\r\n");
      out.write("			$('#nac').text('')\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// pw의 값이 변하면 아래의 checkPassword함수가 실행되도록 구현\r\n");
      out.write("		$(\"#pw\").change(function() {\r\n");
      out.write("			checkPassword($('#pw').val());\r\n");
      out.write("		});\r\n");
      out.write("	});//document\r\n");
      out.write("\r\n");
      out.write("	//비밀번호 유효성 검사 숫자/소문자/특수문자를 모두 포함한 pw만 가능.\r\n");
      out.write("	$(\"#pw\").change(function() {//change=> pw의 값이 변경되었을 때 실행.\r\n");
      out.write("		checkPassword($('#pw').val());\r\n");
      out.write("	});\r\n");
      out.write("	function checkPassword(pw) {\r\n");
      out.write("\r\n");
      out.write("		if (!/^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/.test(pw)) {\r\n");
      out.write("			alert('비밀번호는 8자 이상이어야 하며, 숫자/소문자/특수문자를 모두 포함해야 합니다.');\r\n");
      out.write("			//$('#pwc1').text('숫자+영문자+특수문자 조합으로 8자리 이상 사용해야 합니다.')\r\n");
      out.write("			$('#pw').val('').focus();\r\n");
      out.write("			//focus=>#pw가 선택되었을 때 실행되어, pw안에 들어있는 값을 지워준다.=> 유효성 검사를 통과한 pw만 쓰기 위한 과정\r\n");
      out.write("			//값을 지워주지 않았을 경우 수정하기 버튼을 누르면 회원수정이 완료되기 때문에 지워주어야 한다.\r\n");
      out.write("			return false;\r\n");
      out.write("		}//if\r\n");
      out.write("	}//function checkPassword(pw)\r\n");
      out.write("\r\n");
      out.write("	//취소버튼 눌렀을 때 productList.jsp호출\r\n");
      out.write("	$(document).ready(function() {\r\n");
      out.write("		$('#cancel').click(function() {\r\n");
      out.write("			alert(\"회원수정 취소 하시겠습니까?\");\r\n");
      out.write("			location.href = \"productList.jsp\";\r\n");
      out.write("		})\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"top\">\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/myPage.jsp", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<h3 class=\"active\">회원수정</h3>\r\n");
      out.write("\r\n");
      out.write("	<form action=\"memberUpdate\" id=\"form\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"left\">아이디</td>\r\n");
      out.write("				<td class=\"right\"><input class=\"form-control input-lg\"\r\n");
      out.write("					type=\"text\" name=\"user_id\" id=\"id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("					readonly=\"readonly\">\r\n");
      out.write("					<div id=\"idc\"></div></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"left\">패스워드</td>\r\n");
      out.write("				<td class=\"right\"><input class=\"form-control input-lg\"\r\n");
      out.write("					type=\"password\" name=\"user_pw\" id=\"pw\"\r\n");
      out.write("					placeholder=\"영문,숫자합 8글자이상 써주세요\">\r\n");
      out.write("					<div id=\"pwc1\"></div></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"left\">패스워드확인</td>\r\n");
      out.write("				<td class=\"right\"><input class=\"form-control input-lg\"\r\n");
      out.write("					type=\"password\" name=\"pw2\" id=\"pw2\" placeholder=\"비밀번호를 재입력해주세요\">\r\n");
      out.write("					<div id=\"pwc2\"></div></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"left\">이름</td>\r\n");
      out.write("				<td class=\"right\"><input class=\"form-control input-lg\"\r\n");
      out.write("					type=\"text\" name=\"user_name\" id=\"name\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("					<div id=\"nac\"></div></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<button type=\"button\" id=\"memberUp\" class=\"btn btn-light\" style=\"margin-left: 500px;\">회원수정</button>\r\n");
      out.write("		<button type=\"button\" id=\"cancel\" class=\"btn btn-light\">회원수정취소</button>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
